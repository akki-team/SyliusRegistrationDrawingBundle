{{ render(url('sylius_admin_get_drawing_fields', {'id': form.vars.data.id})) }}

<div class="js-subst-fields" data-subst-fields="{{ substituableFields|json_encode }}"></div>

<script>
    const addFieldsBtn = document.querySelector('#addFieldsBtn');
    const fieldsContainer = document.querySelector('#fieldsContainer');

    document.querySelectorAll('.remove-field').forEach(
        el => el.addEventListener('click', (event) => {
            deleteField(event);
        }),
    );

    addFieldsBtn.addEventListener('click', () => {
        const selectedFiles = Array.from(document.querySelector('#attributeChoice').getElementsByTagName('a'));
        addInputs(selectedFiles);
    })

    function slugify (value){
        const checkOne = String(value).replace(/[ ']+/g, '-'); // on remplace les espaces et quotes
        const checkTwo = String(checkOne).replace(/[é()°¨à:]+/g, ''); // on remplace quelques caractères
        return String(checkTwo);
    }

    function inputAlreadyExists(field) {
        const fieldSlug = slugify(field.innerText.toLowerCase());
        const fieldId = field.dataset.value;

        const fieldOrderName = `#${fieldSlug}-order-${fieldId}`;

        return document.querySelector(fieldOrderName) !== null;
    }

    function addInputs(fields) {
        fields.forEach((field) => {
            if (!inputAlreadyExists(field)) {
                createFieldInputs(field);
            }
        });
    }

    function deleteField(event) {
        event.preventDefault();
        const drawingColumn = event.currentTarget.closest('.drawing-column');
        const h4DrawingColumn = drawingColumn.previousElementSibling;
        drawingColumn.remove();
        h4DrawingColumn.remove();
    }

    function createFieldInputs(field) {
        const fieldSlug = slugify(field.innerText.toLowerCase());
        const fieldId = field.dataset.value;
        const formats = {
            'd/m/Y': 'Date d/m/Y',
            'd/m/Y H:i': 'Date d/m/Y H:i',
            'Y/m/d': 'Date Y/m/d',
            'Y/m/d H:i': 'Date Y/m/d H:i',
            'd-m-Y': 'Date Y-m-d',
            'd-m-Y H:i': 'Date Y-m-d H:i',
            'Y-m-d': 'Date Y-m-d',
            'Y-m-d H:i': 'Date Y-m-d H:i',
            'dmY': 'Date dmY',
            'dmY H:i': 'Date dmY H:i',
            'Ymd': 'Date Ymd',
            'Ymd H:i': 'Date Ymd H:i',
        };

        let index = Math.max(...Array.from(document.querySelectorAll('.drawing-field-order')).map(o => o.getAttribute('value')));
        if (index < 0){
            index = 0;
        }

        const inputsContainer = document.createElement('div');
        inputsContainer.setAttribute('class', 'drawing-column three fields');

        const divider = document.createElement('h4');
        divider.setAttribute('class', 'ui dividing header');
        divider.innerText = field.innerText;

        // Input nom du champ
        const fieldNameTag = document.createElement('div');
        fieldNameTag.setAttribute('class', 'field');
        const inputNameLabel = document.createElement('label');
        inputNameLabel.setAttribute('for', `${fieldSlug}-name-${fieldId}`);
        inputNameLabel.innerText = 'Nom';
        const inputName = document.createElement('input');
        inputName.setAttribute('type', 'text');
        inputName.setAttribute('id', `${fieldSlug}-name-${fieldId}`);
        inputName.setAttribute('name', `fields[${fieldId}][name]]`);
        inputName.setAttribute('value', field.innerText);
        fieldNameTag.append(inputNameLabel);
        fieldNameTag.append(inputName);

        // Input ordre
        const fieldOrderTag = document.createElement('div');
        fieldOrderTag.setAttribute('class', 'field');
        const inputOrderLabel = document.createElement('label');
        inputOrderLabel.setAttribute('for', `${fieldSlug}-order-${fieldId}`);
        inputOrderLabel.innerText = 'Ordre';
        const inputOrder = document.createElement('input');
        inputOrder.setAttribute('type', 'number');
        inputOrder.setAttribute('class', 'drawing-field-order');
        inputOrder.setAttribute('id', `${fieldSlug}-order-${fieldId}`);
        inputOrder.setAttribute('name', `fields[${fieldId}][order]]`);
        inputOrder.setAttribute('min', '0');
        inputOrder.setAttribute('value', index + 1);
        inputOrder.setAttribute('required', 'required');
        fieldOrderTag.append(inputOrderLabel);
        fieldOrderTag.append(inputOrder);

        // Input position
        const fieldPositionTag = document.createElement('div');
        fieldPositionTag.setAttribute('class', 'field');
        const inputPositionLabel = document.createElement('label');
        inputPositionLabel.setAttribute('for', `${fieldSlug}-position-${fieldId}`);
        inputPositionLabel.innerText = 'Position (si longueur fixe)';
        const inputPosition = document.createElement('input');
        inputPosition.setAttribute('type', 'number');
        inputPosition.setAttribute('id', `${fieldSlug}-position-${fieldId}`);
        inputPosition.setAttribute('name', `fields[${fieldId}][position]]`);
        inputPosition.setAttribute('min', '0');
        fieldPositionTag.append(inputPositionLabel);
        fieldPositionTag.append(inputPosition);

        // Input taille
        const fieldLengthTag = document.createElement('div');
        fieldLengthTag.setAttribute('class', 'field');
        const inputLengthLabel = document.createElement('label');
        inputLengthLabel.setAttribute('for', `${fieldSlug}-length-${fieldId}`);
        inputLengthLabel.innerText = 'Taille (si longueur fixe)';
        const inputLength = document.createElement('input');
        inputLength.setAttribute('type', 'number');
        inputLength.setAttribute('name', `fields[${fieldId}][length]]`);
        inputLength.setAttribute('min', '0');
        fieldLengthTag.append(inputLengthLabel);
        fieldLengthTag.append(inputLength);

        // Input format
        const fieldFormatTag = document.createElement('div');
        fieldFormatTag.setAttribute('class', 'field');
        const inputFormatLabel = document.createElement('label');
        inputFormatLabel.setAttribute('for', `${fieldSlug}-Format-${fieldId}`);
        inputFormatLabel.innerText = 'Format (Si format date)';
        const inputFormat = document.createElement('select');
        inputFormat.setAttribute('id', `${fieldSlug}-format-${fieldId}`);
        inputFormat.setAttribute('name', `fields[${fieldId}][format]]`);
        const defaultoption = document.createElement('option');
        defaultoption.setAttribute('value', '');
        defaultoption.setAttribute('selected', 'selected');
        inputFormat.append(defaultoption);
        fieldFormatTag.append(inputFormatLabel);
        fieldFormatTag.append(inputFormat);

        for (const [key, value] of Object.entries(formats)) {
            const option = document.createElement('option');
            option.setAttribute('value', key);
            option.innerText = value;
            inputFormat.append(option);
        }

        // Input liste de valeurs
        const fieldSelectionTag = document.createElement('div');
        fieldSelectionTag.setAttribute('class', 'field');
        const inputSelectionLabel = document.createElement('label');
        inputSelectionLabel.setAttribute('for', `${fieldSlug}-selection-${fieldId}`);
        inputSelectionLabel.innerText = 'Liste de valeurs';
        const inputSelection = document.createElement('input');
        inputSelection.setAttribute('type', 'text');
        inputSelection.setAttribute('id', `${fieldSlug}-selection-${fieldId}`);
        inputSelection.setAttribute('name', `fields[${fieldId}][selection]]`);
        inputSelection.setAttribute('placeholder', 'm => MR;f => MME;u => NR');
        inputSelection.addEventListener('change', () => {
            const selectionRegex = new RegExp(/^([^;=>]+=>[^;=>]+)(;([^;=>]+=>[^;=>]+))*$/);
            if (selectionRegex.test(inputSelection.value)) {
                return true
            } else {
                alert("Format de la liste de valeurs invalide !");
            }
        });
        const substFields = JSON.parse(document.querySelector('.js-subst-fields').dataset.substFields);
        let substFieldsValues = [];
        const inputSelectionHelp = document.createElement('help');
        if (substFields.includes(field.innerText)) {
            for (const f of Object.entries(substFields)) {
               if (f['field'] === field.innerText) {
                   substFieldsValues = f['values'];
               }
            }
            inputSelectionHelp.innerText = `Valeurs du champ: ${substFieldsValues}`;
        }

        //button delete
        const fieldDeleteButton = document.createElement('div');
        fieldDeleteButton.setAttribute('class', 'field');
        const deleteButton = document.createElement('button');
        deleteButton.setAttribute('class', 'ui red right labeled icon button remove-field');
        deleteButton.setAttribute('style', 'margin-top: 27px');
        deleteButton.innerText = 'Supprimer';

        deleteButton.addEventListener('click', (event) => deleteField(event));

        const iDeleteButton = document.createElement('i');
        iDeleteButton.setAttribute('class', 'remove icon');
        deleteButton.append(iDeleteButton);
        fieldDeleteButton.append(deleteButton);

        fieldSelectionTag.append(inputSelectionLabel,inputSelection);
        if (substFieldsValues !== []) {
            fieldSelectionTag.append(inputSelectionHelp);
        }
        inputsContainer.append(fieldNameTag, fieldOrderTag,fieldPositionTag,fieldLengthTag,fieldFormatTag,fieldSelectionTag,fieldDeleteButton);
        fieldsContainer.append(divider,inputsContainer);
    }
</script>
